"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Skeleton = exports.Cell = exports.Header = exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _ink = require("ink");

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Components ----------------------------------------------------------------
const Header = ({
  children
}) => _react.default.createElement(_ink.Color, {
  blue: true,
  bold: true
}, children);

exports.Header = Header;
Header.propTypes = {
  children: _propTypes.default.any.isRequired
};

const Cell = ({
  children
}) => _react.default.createElement(_ink.Color, null, children);

exports.Cell = Cell;
Cell.propTypes = {
  children: _propTypes.default.any.isRequired,
  focused: _propTypes.default.bool
};
Cell.defaultProps = {
  focused: false
};

const Skeleton = ({
  children
}) => _react.default.createElement(_ink.Color, {
  white: true,
  bold: true
}, children);

exports.Skeleton = Skeleton;
Skeleton.propTypes = {
  children: _propTypes.default.any.isRequired // Helpers -------------------------------------------------------------------

};

const get = key => obj => obj[key];

const length = el => el.length;

const isUndefined = v => v === undefined;

const not = func => (...args) => !func(...args);

const toString = val => (val || String()).toString();

const isEmpty = el => el.length === 0;

const intersperse = val => vals => vals.reduce((s, c, i) => isEmpty(s) ? [c] : [...s, val(i), c], []);

const fillWith = el => length => str => `${str}${el.repeat(length - str.length)}`;

const getCells = columns => data => columns.map(({
  width,
  key
}) => ({
  width,
  key,
  value: get(key)(data)
}));

const union = (...arrs) => [...new Set([].concat(...arrs))];

const generateColumn = padding => data => key => {
  const allColumns = data.map(get(key));
  const columnsWithValues = allColumns.filter(not(isUndefined));
  const vals = columnsWithValues.map(toString);
  const lengths = vals.map(length);
  const width = Math.max(...lengths, key.length) + padding * 2;
  return {
    width,
    key
  };
};

const copyToObject = func => arr => arr.reduce((o, k) => ({ ...o,
  [k]: func(k)
}), {});

const generateHeadings = keys => copyToObject(key => key)(keys);

const generateSkeleton = keys => copyToObject(() => '')(keys);

const line = (key, Cell, Skeleton, {
  line,
  left,
  right,
  cross,
  padding
}) => (cells, index = '') => {
  const fillWithLine = fillWith(line);
  const columns = cells.map(({
    width,
    key,
    value
  }, i) => _react.default.createElement(Cell, {
    key: key + String(i)
  }, line.repeat(padding), fillWithLine(width - padding)(toString(value))));
  return _react.default.createElement(_ink.Box, {
    key: key + String(index)
  }, _react.default.createElement(Skeleton, null, left), intersperse(i => _react.default.createElement(Skeleton, {
    key: i
  }, cross))(columns), _react.default.createElement(Skeleton, null, right));
}; // Table ---------------------------------------------------------------------
// Config --------------------------------------------------------------------


const Table = ({
  data,
  padding,
  header,
  cell,
  skeleton
}) => {
  const topLine = line('top', skeleton, skeleton, {
    line: '─',
    left: '┌',
    right: '┐',
    cross: '┬',
    padding
  });
  const bottomLine = line('bottom', skeleton, skeleton, {
    line: '─',
    left: '└',
    right: '┘',
    cross: '┴',
    padding
  });
  const midLine = line('mid', skeleton, skeleton, {
    line: '─',
    left: '├',
    right: '┤',
    cross: '┼',
    padding
  });
  const headers = line('header', header, skeleton, {
    line: ' ',
    left: '│',
    right: '│',
    cross: '│',
    padding
  });
  const row = line('row', cell, skeleton, {
    line: ' ',
    left: '│',
    right: '│',
    cross: '│',
    padding
  });
  const keys = union(...data.map(Object.keys));
  const columns = keys.map(generateColumn(padding)(data));
  const headings = generateHeadings(keys);

  const _skeleton = generateSkeleton(keys);

  const getRow = getCells(columns);
  const headersRow = getRow(headings);
  const emptyRow = getRow(_skeleton);
  const rows = data.map((d, i) => row(getRow(d), i));
  return _react.default.createElement("span", null, topLine(emptyRow), headers(headersRow), midLine(emptyRow), intersperse(i => midLine(emptyRow, i))(rows), bottomLine(emptyRow));
};

Table.propTypes = {
  data: _propTypes.default.arrayOf(_propTypes.default.object),
  padding: _propTypes.default.number,
  header: _propTypes.default.func,
  cell: _propTypes.default.func,
  skeleton: _propTypes.default.func
};
Table.defaultProps = {
  data: [],
  padding: 1,
  header: Header,
  cell: Cell,
  skeleton: Skeleton // Exports -------------------------------------------------------------------

};
var _default = Table; // ---------------------------------------------------------------------------

exports.default = _default;